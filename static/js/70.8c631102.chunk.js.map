{"version":3,"file":"static/js/70.8c631102.chunk.js","mappings":"8NACA,G,QAAuB,2BAAvB,EAAyD,2BAAzD,EAA4F,2BAA5F,EAAgI,4B,SCqGhI,EA9FqB,WACnB,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,ECQY,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACL,EAAIM,GAWvD,OAREN,IAFFM,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,OAGP,IDrBQG,GAEGC,GAAaC,EAAAA,EAAAA,MAAnBC,KACR,GAAqBC,EAAAA,EAAAA,MAAdC,GAAP,eAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBrB,EAAR,EAAQA,KAAMsB,EAAd,EAAcA,MACd,OAAQtB,GACN,IAAK,OACHC,EAAQqB,GACR,MACF,IAAK,SACHnB,EAAUmB,KA2BVC,EAAQ,WACZtB,EAAQ,IACRE,EAAU,KAGZ,OACE,kBAAMqB,SAzBa,SAAAJ,GACnBA,EAAMK,iBAEN,IAAMC,EAAa,CACjBtB,GAAAA,EACAJ,KAAAA,EACAE,OAAAA,GAGEY,EAASa,MAAK,SAAAC,GAAO,OAAIA,EAAQ5B,KAAK6B,gBAAkB7B,EAAK6B,iBAC/DC,EAAAA,GAAAA,QAAc,sCAEdZ,EAAWQ,GACXI,EAAAA,GAAAA,QAAc,qCAEhBP,KAU8BQ,UAAWC,EAAzC,WACE,mBAAOD,UAAWC,EAAlB,kBAEE,kBACED,UAAWC,EACXC,KAAK,OACLjC,KAAK,OACLkC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRd,MAAOtB,EACPqC,SAAUlB,QAId,mBAAOY,UAAWC,EAAlB,oBAEE,kBACED,UAAWC,EACXC,KAAK,MACLjC,KAAK,SACLkC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRd,MAAOpB,EACPmC,SAAUlB,QAId,mBACEc,KAAK,SACLK,UAAWtC,IAASE,EACpB6B,UAAWC,EAHb,0BAOA,SAAC,KAAD,Q,oBElEN,EArBe,WACb,IAAMO,GAAUC,EAAAA,EAAAA,MACVC,GAASC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,UAM5C,OACA,sDAEI,mBACA,kBACAR,KAAK,OACLX,MAAOmB,EACPJ,SAVe,SAAAjB,GAAK,OAAImB,GAASK,EAAAA,EAAAA,GAAaxB,EAAMC,OAAOC,eCT/D,GAAgB,aAAe,kCAAkC,aAAe,kCAAkC,SAAW,8BAA8B,UAAY,gCCG1JuB,EAAc,SAAC,GAA0B,IAAxBzC,EAAuB,EAAvBA,GAAIJ,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OACtC,GAAwB4C,EAAAA,EAAAA,MAAjBC,GAAP,eAGA,OACE,gBAAIhB,UAAWC,EAAAA,aAAf,WACE,cAAGD,UAAWC,EAAAA,SAAd,SAA2BhC,KAC3B,cAAG+B,UAAWC,EAAAA,SAAd,SAA2B9B,KAC3B,mBACE6B,UAAWC,EAAAA,UACXC,KAAK,SACLe,QAAS,kBAAOD,EAAc3C,IAHhC,wBCgCJ,EApCkB,WAClB,OAAsCW,EAAAA,EAAAA,MAAxBD,EAAd,EAAQE,KAAgBiC,EAAxB,EAAwBA,UAGlBC,GAFSR,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,UAEVZ,cAAcsB,OACxCC,EAAe,OAAGtC,QAAH,IAAGA,OAAH,EAAGA,EAAU2B,QAAO,qBAAGzC,KAAgB6B,cAAcwB,SAASH,MAEjF,OACE,gBAAKnB,UAAWC,EAAAA,UAAhB,UACA,gBAAID,UAAWC,EAAAA,aAAf,UACGiB,IAAa,sCACbG,GAAmBA,EAAgBE,KAAI,YAA2B,IAAxBlD,EAAuB,EAAvBA,GAAIJ,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OACnD,OACE,SAAC2C,EAAD,CAEE7C,KAAMA,EACNE,OAAQA,EACRE,GAAIA,GAHCA,YCrBnB,KCkBA,EAbqB,WACnB,OACI,qBAAS2B,UAAWC,EAAAA,UAApB,WACE,eAAID,UAAWC,EAAAA,MAAf,wBACA,SAAC,EAAD,KACA,eAAID,UAAWC,EAAAA,MAAf,uBACA,SAAC,EAAD,KACC,SAAC,EAAD","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","../node_modules/nanoid/index.browser.js","components/Filter/Filter.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactItem.js","components/ContactList/ContactList.js","pages/ContactsPage/ContactsPage.module.css","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"btnAdd\":\"ContactForm_btnAdd__F4QeR\"};","import React, { useState } from 'react';\nimport { useGetContactsQuery, useAddContactMutation } from 'redux/contacts/contacts-slice';\nimport PropTypes from 'prop-types';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport s from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\n\nconst ContactsForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const id = nanoid();\n\n  const { data: contacts } = useGetContactsQuery();\n  const [addContact] = useAddContactMutation();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break\n\n        default:\n    }\n    return;\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    \n    const newContact = {\n      id,\n      name,\n      number,\n    };\n\n    if (contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      toast.warning('Name is already in contacts list!')\n    } else {\n      addContact(newContact)\n      toast.success('New contact is added a phonebook')\n    }\n    reset();\n  }\n\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n\n      <label className={s.label}>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button\n        type=\"submit\"\n        disabled={!name || !number}\n        className={s.btnAdd}\n      >\n        Add Contact\n      </button>\n      <ToastContainer />\n    </form>\n  );\n};\n\nContactsForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n};\n\nexport default ContactsForm;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filter-slice';\n\n\nconst Filter = () => { \n  const dispatch =useDispatch();\n  const filter = useSelector(state => state.filter)\n\n\n  const onFilter = event => dispatch(changeFilter(event.target.value))\n\n\nreturn (\n<label>\n    Find contacts by name\n    <br />\n    <input \n    type=\"text\" \n    value={filter}\n    onChange={onFilter} />\n  </label>\n );\n}\n\n\nexport default Filter\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactList_contactsList__7leRd\",\"contactsItem\":\"ContactList_contactsItem__x8C9b\",\"itemName\":\"ContactList_itemName__6OYsD\",\"btnDelete\":\"ContactList_btnDelete__Eeo9v\"};","import { useDeleteContactMutation } from 'redux/contacts/contacts-slice';\nimport s from './ContactList.module.css';\n\n\nexport const ContactItem = ({ id, name, number }) => {\n  const [deleteContact] = useDeleteContactMutation();\n\n\n  return (\n    <li className={s.contactsItem}>\n      <p className={s.itemName}>{name}</p>\n      <p className={s.itemName}>{number}</p>\n      <button\n        className={s.btnDelete}\n        type=\"button\"\n        onClick={() => (deleteContact(id))}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\nimport { useGetContactsQuery } from 'redux/contacts/contacts-slice';\nimport { useSelector } from 'react-redux';\nimport { ContactItem } from './ContactItem';\n\n\nconst ContactList = () => {\n  const { data: contacts, isLoading } = useGetContactsQuery();\n  const filter = useSelector(state => state.filter);\n  \n  const normalizedFilter = filter.toLowerCase().trim();\n  const visibleContacts = contacts?.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\n\n    return (\n      <div className={s.container}>\n      <ul className={s.contactsList}>\n        {isLoading && <p>Loading...</p>}\n        {visibleContacts && visibleContacts.map(({ id, name, number }) => {\n          return (\n            <ContactItem\n              key={id}\n              name={name}\n              number={number}\n              id={id}\n            />\n          );\n        })}\n      </ul>\n      </div>\n    );\n  };\n  \n  ContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      })\n    ),\n  };\n  \n  export default ContactList;","// extracted by mini-css-extract-plugin\nexport default {};","import ContactsForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport s from './ContactsPage.module.css'\n\n\nconst ContactsPage = () => { \n  return (\n      <section className={s.phonebook}>\n        <h1 className={s.title}>Phonebook</h1>\n        <ContactsForm />\n        <h2 className={s.title}>Contacts</h2>\n        <Filter />\n        {<ContactList />}\n      </section>\n     \n  );\n};\n\nexport default ContactsPage;"],"names":["useState","name","setName","number","setNumber","id","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","handleChange","event","target","value","reset","onSubmit","preventDefault","newContact","find","contact","toLowerCase","toast","className","s","type","pattern","title","required","onChange","disabled","dispatch","useDispatch","filter","useSelector","state","changeFilter","ContactItem","useDeleteContactMutation","deleteContact","onClick","isLoading","normalizedFilter","trim","visibleContacts","includes","map"],"sourceRoot":""}