{"version":3,"file":"static/js/689.006ca94b.chunk.js","mappings":"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","sources":["redux/contacts/contacts-operations.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactItem.js","components/ContactList/ContactList.js","pages/ContactsPage/ContactsPage.module.css","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import axios from \"axios\";\n\nimport {\n    fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n} from './contacts-actions';\n\n\n\nconst addContact = ({name, number}) => dispatch => {\n    const contact = {\n        name,\n        number\n    };\n\n    dispatch(addContactsRequest());\n    axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactsSuccess(data)))\n    .catch(error => dispatch(addContactsError(error.message)))\n};\n\n\nconst fetchContacts = () => async dispatch => {\n    dispatch(fetchContactsRequest());\n    try {\n        const { data } = await axios.get('/contacts');\n        dispatch(fetchContactsSuccess(data))\n    } catch (error) {\n        dispatch(fetchContactsError(error.message));\n    }\n};\n\nconst deleteContact = contactId => dispatch => {\n    dispatch(deleteContactsRequest());\n    \n    axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(deleteContactsSuccess(contactId)))\n    .catch(error => dispatch(deleteContactsError(error.message)))\n}\n\nconst contactsOperations = {\n    fetchContacts,\n    addContact,\n    deleteContact,\n};\n\nexport default contactsOperations;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"btnAdd\":\"ContactForm_btnAdd__F4QeR\"};","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n    const filter = getFilter(state).toLowerCase();\n    const contacts = getContacts(state);\n    return contacts\n    .filter(contact => {\n        return contact.name.toLowerCase().includes(filter)\n    })\n}\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { ToastContainer, toast } from 'react-toastify';\n  import 'react-toastify/dist/ReactToastify.css';\nimport s from './ContactForm.module.css';\nimport contactsOperations from 'redux/contacts/contacts-operations';\nimport { getContacts } from 'redux/contacts/contacts-selectors';\nimport { useId } from 'react';\n\nconst ContactsForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const id = useId;\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break\n\n        default:\n    }\n    return;\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    \n    const newContact = {\n      id,\n      name,\n      number,\n    };\n\n    if (contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      toast.warning('Name is already in contacts list!')\n    } else {\n      dispatch(contactsOperations.addContact(newContact))\n    }\n    reset();\n  }\n\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n\n      <label className={s.label}>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button\n        type=\"submit\"\n        disabled={!name || !number}\n        className={s.btnAdd}\n      >\n        Add Contact\n      </button>\n      <ToastContainer />\n    </form>\n  );\n};\n\nContactsForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n};\n\nexport default ContactsForm;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/contacts/contacts-selectors';\n\nconst Filter = () => { \n  const dispatch =useDispatch();\n  const onFilter = event => dispatch(getFilter(event.target.value))\n\n\nreturn (\n<label>\n    Find contacts by name\n    <br />\n    <input type=\"text\" onChange={onFilter} />\n  </label>\n );\n}\n\n\nexport default Filter\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactList_contactsList__7leRd\",\"contactsItem\":\"ContactList_contactsItem__x8C9b\",\"itemName\":\"ContactList_itemName__6OYsD\",\"btnDelete\":\"ContactList_btnDelete__Eeo9v\"};","import { useDispatch } from 'react-redux';\nimport s from './ContactList.module.css';\nimport contactsOperations from 'redux/contacts/contacts-operations';\n\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  \n  const onDelete = id => dispatch(contactsOperations.deleteContact(id))\n\n  return (\n    <li className={s.contactsItem}>\n      <p className={s.itemName}>{name}</p>\n      <p className={s.itemName}>{number}</p>\n      <button\n        className={s.btnDelete}\n        type=\"button\"\n        onClick={() => dispatch(onDelete(id))}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/contacts-selectors';\nimport { ContactItem } from './ContactItem';\n\n\nconst ContactList = () => {\n  const items = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  \n\n  const getNormalizedItem = () => {\n    const  normalizedFilter = filter.toLowerCase().trim();\n    return items.filter(item => item.name.toLowerCase().includes(normalizedFilter))\n  }\n  const contacts = getNormalizedItem()\n\n    return (\n      <ul className={s.contactsList}>\n        {contacts.map(({ id, name, number }) => {\n          return (\n            <ContactItem\n              key={id}\n              name={name}\n              number={number}\n              id={id}\n            />\n          );\n        })}\n      </ul>\n    );\n  };\n  \n  ContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      })\n    ),\n  };\n  \n  export default ContactList;","// extracted by mini-css-extract-plugin\nexport default {};","import { useDispatch } from 'react-redux';\nimport contactsOperations from 'redux/contacts/contacts-operations';\n\nimport ContactsForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport s from './ContactsPage.module.css'\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n\n  dispatch(contactsOperations.addContact());\n\n  return (\n    <main>\n      <section className={s.phonebook}>\n        <h1 className={s.title}>Phonebook</h1>\n        <ContactsForm />\n        <h2 className={s.title}>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </section>\n    </main>\n  );\n}"],"names":["contactsOperations","fetchContacts","dispatch","fetchContactsRequest","axios","data","fetchContactsSuccess","fetchContactsError","message","addContact","name","number","contact","addContactsRequest","then","addContactsSuccess","catch","error","addContactsError","deleteContact","contactId","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","getContacts","state","contacts","items","getFilter","filter","useState","setName","setNumber","id","useId","useSelector","useDispatch","handleChange","event","target","value","reset","onSubmit","preventDefault","newContact","find","toLowerCase","toast","className","s","type","pattern","title","required","onChange","disabled","ContactItem","onClick","onDelete","normalizedFilter","trim","item","includes","getNormalizedItem","map","ContactsPage"],"sourceRoot":""}